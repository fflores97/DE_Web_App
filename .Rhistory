names(plots) <- fileNames
names(plots)
plotNames <- c("pcaPlot", "importancePlot")
names(plots) <- plotNames
paste("~/Desktop/testingR/", names(x), ".pdf", sep = "")
fileNames <- sapply(
X = plots,
function(x) {
paste("~/Desktop/testingR/", names(x), ".pdf", sep = "")
# paste(gsub('/$','',outputFolder),'/',names(x),'.pdf', sep = '')
})
fileNames
gridPlot
plots
ggsave(plots,filename = "~/Desktop/testingR/lol.pdf")
names(plots$pcaPlot)
lapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",names(plot),".pdf"), device = "pdf",plot = x)})
names(plots)
lapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",names(plots),".pdf"), device = "pdf",plot = x)})
lapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",names(plots)[x],".pdf"), device = "pdf",plot = x)})
plots[1]
names(plots[1])
names(plots[2])
names(plots)
names(plots["importancePlot"])
lapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",names(plots[x]),".pdf"), device = "pdf",plot = x)})
lapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",names(plots[[x]]),".pdf"), device = "pdf",plot = x)})
dim(plots)
length(plots)
lapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",plotNames,".pdf"), device = "pdf",plot = x)})
rapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",plotNames,".pdf"), device = "pdf",plot = x)})
Q
sapply(plots,function(x){ggsave(filename = paste("~/Desktop/testingR/",plotNames,".pdf"), device = "pdf",plot = x)})
fileNames <- paste("~/Desktop/testingR/", names(plots),".pdf")
sapply(plots,function(x){ggsave(filename = fileNames, device = "pdf",plot = x)})
sapply(plots,function(x){ggsave(filename = fileNames[x], device = "pdf",plot = x)})
sapply(plots,function(x,y){ggsave(filename = fileNames[y], device = "pdf",plot = x)})
sapply(plots(x),function(i){ggsave(filename = fileNames[i], device = "pdf",plot = x)})
sapply(seq_along(plots),function(i){ggsave(filename = fileNames[i], device = "pdf",plot = x)})
mapply(function(plots, i){ggsave(filename = fileNames[i], device = "pdf",plot = plots)})
mapply(function(plots, i) ggsave(filename = fileNames[i], device = "pdf",plot = plots))
mapply(function(plots= plots, i) ggsave(filename = fileNames[i], device = "pdf", plot = plots))
mapply(function(plots, i) {ggsave(filename = fileNames[i], device = "pdf", plot = plots)}, plots = plots, i = fileNames)
mapply(function(plots, i) {ggsave(filename = fileNames[plots], device = "pdf", plot = plots)}, plots = plots, i = fileNames)
fileNames <- paste("~/Desktop/testingR/", names(plots),".pdf")
l
mapply(function(plots, i) {ggsave(filename = fileNames[plots], device = "pdf", plot = plots)}, plots = plots, i = 1:length(fileNames))
mapply(function(plots, i) {ggsave(filename = fileNames[i], device = "pdf", plot = plots)}, plots = plots, i = 1:length(fileNames))
downloadPlots <- function(..., plotNames){
plots <- list(...)
plots <- list(gridPlot,importancePlot)
names(plots) <- plotNames
fileNames <- paste("~/Desktop/testingR/", names(plots),".pdf")
# fileNames <- sapply(
#   X = plots,
#   function(x) {
#     paste("~/Desktop/testingR/", names(x), ".pdf", sep = "")
#     # paste(gsub('/$','',outputFolder),'/',names(x),'.pdf', sep = '')
# })
#
# fileNames <- plots %>%
#   imap(.x = .,
#        .f =  function(.x){
#     paste("~/Desktop/testingR/", LETTERS[.x], ".pdf", sep = "")
#   })
downloadHandler(
filename = "RNASeq-plots.zip",
content = function(file){
# sapply(seq_along(plots),function(i){ggsave(filename = fileNames[i], device = "pdf",plot = x)})
mapply(function(plots, i) {ggsave(filename = fileNames[i], device = "pdf", plot = plots)}, plots = plots, i = 1:length(fileNames))
zip(zipfile = file, files = fileNames)
}
)
}
downloadPlots <- function(..., plotNames){
plots <- list(...)
# plots <- list(gridPlot,importancePlot)
names(plots) <- plotNames
fileNames <- paste("~/Desktop/testingR/", names(plots),".pdf")
# fileNames <- sapply(
#   X = plots,
#   function(x) {
#     paste("~/Desktop/testingR/", names(x), ".pdf", sep = "")
#     # paste(gsub('/$','',outputFolder),'/',names(x),'.pdf', sep = '')
# })
#
# fileNames <- plots %>%
#   imap(.x = .,
#        .f =  function(.x){
#     paste("~/Desktop/testingR/", LETTERS[.x], ".pdf", sep = "")
#   })
downloadHandler(
filename = "RNASeq-plots.zip",
content = function(file){
# sapply(seq_along(plots),function(i){ggsave(filename = fileNames[i], device = "pdf",plot = x)})
mapply(function(plots, i) {ggsave(filename = fileNames[i], device = "pdf", plot = plots)}, plots = plots, i = 1:length(fileNames))
zip(zipfile = file, files = fileNames)
}
)
}
runApp()
runApp()
runApp()
runApp()
sampleCorrelation <- sampleCorrelation(normalizedCountsTable = expressionMatrix)
class(sampleCorrelation)
methods(ComplexHeatmap)
draw(sampleCorrelation)
class(draw(sampleCorrelation))
ggsave(sampleCorrelation)
ggsave(draw(sampleCorrelation))
sampleCorrelation <- print(sampleCorrelation(normalizedCountsTable = expressionMatrix))
ggsave(sampleCorrelation)
install.packages("plotly")
expressionMatrix <- read.csv("~/Downloads/shNLGN4X-combined-gene-level-counts.csv",header = TRUE,row.names = 1,stringsAsFactors = FALSE)
infoTable <- read.csv("~/Downloads/infoTable.csv",header = TRUE)
pca <- samplePCA(expressionMatrix = expressionMatrix,numberOfPCs = 3)
sampleCorrelation <- print(sampleCorrelation(normalizedCountsTable = expressionMatrix))
pdf(paste(sessionDir,"/correlationTest.pdf", sep = ""), width = 12, height=5)
print(sampleCorrelation)
dev.off()
pcaPlots <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
autoClustering <- FALSE
clusters <- 3
numberOfPCs <- 3
pcaPlots <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
detach("package:felipeCommonFunctions", unload=TRUE)
library("felipeCommonFunctions", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
pcaPlots <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
detach("package:felipeCommonFunctions", unload=TRUE)
pcaPlots <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
library("felipeCommonFunctions", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
pcaPlots <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
expressionMatrix <- expressionMatrix[which(apply(expressionMatrix, 1, var)!=0), ]
expressionMatrix <- read.csv("~/Downloads/shNLGN4X-combined-gene-level-counts.csv",header = TRUE,row.names = 1,stringsAsFactors = FALSE)
expressionMatrix <- expressionMatrix[which(apply(expressionMatrix, 1, var)!=0), ]
pca <- stats::prcomp(t(expressionMatrix),center=TRUE,scale=TRUE)
pcaImportanceDF <- pca %>%
broom::tidy(matrix="pcs") %>%
dplyr::rename(.,Individual=percent,Cumulative=cumulative) %>%
tidyr::gather(key,value,Individual,Cumulative)
pcaImportanceDF
pcaDF <- as_data_frame(pca$x,rownames = "Sample")
pcaDF
plotly::plot_ly(data = pcaDF, x = PC1, y = PC2, z = PC3)
plotly::plot_ly(data = pcaDF, x = ~PC1, y = PC2, z = PC3)
plotly::plot_ly(data = pcaDF, x = ~PC1, y = ~PC2, z = ~PC3)
plotly::plot_ly(data = pcaDF, x = ~PC1, y = ~PC2, z = ~PC3, type = "scatter3d")
# Join the dataframe with the clustering information as a tibble
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
# This is just to suppress the graphical output for the moment, but we wanna save this plot later
eclustering <- factoextra::eclust(
t(expressionMatrix),
FUNcluster = "kmeans",
k=clusters,
k.max=min(10,nrow(t(expressionMatrix))-1)
)
# Join the dataframe with the clustering information as a tibble
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
pcaDF
plotly::plot_ly(data = pcaDF, x = ~PC1, y = ~PC2, z = ~PC3, type = "scatter3d", color = ~Cluster)
clusters <- 2
pca <- stats::prcomp(t(expressionMatrix),center=TRUE,scale=TRUE)
pcaImportanceDF <- pca %>%
broom::tidy(matrix="pcs") %>%
dplyr::rename(.,Individual=percent,Cumulative=cumulative) %>%
tidyr::gather(key,value,Individual,Cumulative)
pcaDF <- as_data_frame(pca$x,rownames = "Sample")
# Join the dataframe with the clustering information as a tibble
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
plotly::plot_ly(data = pcaDF, x = ~PC1, y = ~PC2, z = ~PC3, type = "scatter3d", color = ~Cluster)
# Join the dataframe with the clustering information as a tibble
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
plotly::plot_ly(data = pcaDF, x = ~PC1, y = ~PC2, z = ~PC3, type = "scatter3d", color = ~Cluster)
pcaDF
# This is just to suppress the graphical output for the moment, but we wanna save this plot later
eclustering <- factoextra::eclust(
t(expressionMatrix),
FUNcluster = "kmeans",
k=clusters,
k.max=min(10,nrow(t(expressionMatrix))-1)
)
# Join the dataframe with the clustering information as a tibble
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
pcaDF
plotly::plot_ly(data = pcaDF, x = ~PC1, y = ~PC2, z = ~PC3, type = "scatter3d", color = ~Cluster)
pcaDF
pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,color=~Cluster)
pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2)
pcaDF
clusters <- 2
pca <- stats::prcomp(t(expressionMatrix),center=TRUE,scale=TRUE)
pcaDF <- as_data_frame(pca$x,rownames = "Sample")
# This is just to suppress the graphical output for the moment, but we wanna save this plot later
eclustering <- factoextra::eclust(
t(expressionMatrix),
FUNcluster = "kmeans",
k=clusters,
k.max=min(10,nrow(t(expressionMatrix))-1)
)
# Join the dataframe with the clustering information as a tibble
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
pcaDF
pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, color = ~Cluster)
pcaDF %>%
# plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, color = ~Cluster)
plotly::plot_ly(x=~PC1,y=~PC2, color = ~Cluster)
pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, color = ~Cluster)
pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, color = ~Cluster, symbol = ~Sample)
pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, color = ~Cluster, symbol = ~Sample)
pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3)
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3)
plotly::add_trace(pca3dPlot, data = pcaDF)
plotly::add_trace(pca3dPlot, color = pcaDF)
plotly::add_trace(pca3dPlot, color = ~Cluster)
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, name = ~Sample)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, annotations = ~Sample)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, text = ~Sample)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, text = ~Sample, textposition = "top right")
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, text = ~Sample, aanotation= list(textposition = "top"))
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, text = ~Sample, annotation= list(textposition = "top"))
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x=~PC1,y=~PC2,z=~PC3, text = ~Sample, hoverlabel = TRUE)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, hoverinfo = "text")
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, name = ~Sample, hoverinfo = "name")
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, hoverinfo = "text")
pca
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, hoverinfo = "text", mode="marker+text")
pca3dPlot
pca3dPlot <- %>%
add_annotation(color = ~Cluster)
pca3dPlot <- %>%
plotly::add_annotation(color = ~Cluster)
pca3dPlot %>%
plotly::add_annotation(color = ~Cluster)
pca3dPlot %>%
plotly::add_trace(color = ~Cluster)
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample,  mode="marker+text")
pca3dPlot
pca3dPlot %>%
plotly::add_trace(color = ~Cluster)
pcaDF <- as_data_frame(pca$x,rownames = "Sample")
p
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample,  mode="marker+text")
pca3dPlot
# Join the dataframe with the clustering information as a tibble
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
pca3dPlot %>%
plotly::add_trace(color = ~Cluster)
pca3dPlot %>%
plotly::add_trace(data = PCADF, color = ~Cluster)
pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster)
runApp()
detach("package:felipeCommonFunctions", unload=TRUE)
library("felipeCommonFunctions", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp()
pcaP <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
rm(pcaP)
pca <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
plot[-pca3dPlot]
plot[[-pca3dPlot]]
plot[[-pca3dPlot,]]
plot[[-"pca3dPlot"]]
plot[-2]
pca[-2]
pca[-4]
pca[pca != "pca3dPlot"]
pca[pca != importancePlot]
pca[pca != "importancePlot"]
pca[-"pca3dPlot"]
pca[-pca3dPlot]
pca[- pca3dPlot]
rm(pca3dPlot)
pca[- "pca3dPlot"]
pca[[- "pca3dPlot"]]
runApp()
runApp()
detach("package:felipeCommonFunctions", unload=TRUE)
library("felipeCommonFunctions", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp()
pca <- samplePCA(
expressionMatrix,
numberOfPCs = numberOfPCs,
autoClustering = autoClustering,
clusters = clusters
)
pca$pca3dPlot
pcaDF <- pcaDF %>%
dplyr::right_join(dplyr::data_frame(
Sample=names(eclustering$cluster),
Cluster=LETTERS[eclustering$cluster]
))
pcaDF
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster)
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text")
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster)
pca3dPlot
pcaDF
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="text")
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker")
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker") %>%
add_markers(color = ~Cluster)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker") %>%
add_markers(text = ~Cluster)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker") %>%
add_markers(text = ~Sample)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker") %>%
add_text(text = ~Sample)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker") %>%
add_trace(text = ~Sample)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker") %>%
add_mode(text = ~Sample)
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text") %>%
add_mode(text = ~Sample)
source('~/Dropbox (Partners HealthCare)/DFCI_Rotation_Students-Bojana-Polyak-Lab/2018_Felipe_Flores/DE_Web_APP_Felipe_Flores/scripts/testScript.R', echo=TRUE)
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text") %>%
add_text(text = ~Sample)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text")
pca3dPlot
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text",showscale=FALSE)
pca3dPlot
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster,showscale=FALSE)
pca3dPlot
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster,showlegend=FALSE)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text")
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster, showlegend=FALSE)
pca3dPlot
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster, legendgroup = ~Cluster)
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text")
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster, legendgroup = ~Cluster)
pca3dPlot
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster, showlegend = FALSE, colors = "Set2")
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text")
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster, showlegend = FALSE, colors = "Set2")
pca
pca3dPlot
pca3dPlot <- pcaDF %>%
plotly::plot_ly(x = ~PC1, y = ~PC2, z = ~PC3, text = ~Sample, mode="marker+text")
pca3dPlot <- pca3dPlot %>%
plotly::add_trace(data = pcaDF, color = ~Cluster, showlegend = FALSE, colors = "Paired")
pca
pca3dPlot
runApp()
detach("package:felipeCommonFunctions", unload=TRUE)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
detach("package:felipeCommonFunctions", unload=TRUE)
library("felipeCommonFunctions", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp()
str(pca)
pca
rm(pca)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
