DESeq2PlotVolcano <- function(
res,
mainLabel,
minAdjPvalLabel=Inf,
minAdjPvalLabelByTop=Inf,
sigCol,
adjPvalFilter=0.05,
colorFCFilter=2,
colorpAdjFilter=0.1,
relativeTo=''
)
{
df <- res[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
}
adjPvalFilter=0.05
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
### DESeq2PlotVolcano
DESeq2PlotVolcano <- function(
res,
mainLabel,
minAdjPvalLabel=Inf,
minAdjPvalLabelByTop=Inf,
sigCol,
adjPvalFilter=Inf,
colorFCFilter=2,
colorpAdjFilter=0.1,
relativeTo=''
)
{
df <- res[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
}
colorFCFilter=2
colorpAdjFilter=0.1
relativeTo=''
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
class(df)
class(res)
results(df)
res
class(res)
as.data.frame(res)
res <- as.data.frame(DESeq2::results(dds))
df <- res[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
minAdjPvalLabel=0.05
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
mainPlot
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) +
theme_bw() +
geom_point(size = 4, aes(col = significance)) +
# scale_color_manual(values = sigCol) +
theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') +
geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
mainPlot
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
install.packages("ggrepel")
library("ggrepel", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
mainPlot
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df
head(df)
expressionMatrix <- read.csv("~/Downloads/shNLGN4X-combined-gene-level-counts.csv",header = TRUE,row.names = 1,stringsAsFactors = FALSE)
expressionMatrix <- expressionMatrix[rowSums(expressionMatrix) > 10,]
expressionMatrix <- expressionMatrix[,order(colnames(expressionMatrix))]
# Generate design formula
designFormula <- as.formula(paste("", paste("Treatment", collapse=" + "), sep="~ "))
# Begin DESeq
dds <- DESeq2::DESeqDataSetFromMatrix(countData = expressionMatrix, colData = colData, design = designFormula)
dds <- DESeq2::estimateSizeFactors(dds)
normalizedCountsTable <- counts(dds, normalized = TRUE)
dds <- DESeq2::DESeq(dds)
res <- as.data.frame(DESeq2::results(dds))
minAdjPvalLabel=0.05
minAdjPvalLabelByTop=Inf
sigCol
adjPvalFilter=0.05
colorFCFilter=2
colorpAdjFilter=0.1
relativeTo=''
df <- res[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
df
dim(res)
### DESeq2PlotVolcano
DESeq2PlotVolcano <- function(
res,
mainLabel,
minAdjPvalLabel=Inf,
minAdjPvalLabelByTop=Inf,
sigCol,
adjPvalFilter=Inf,
colorFCFilter=2,
colorpAdjFilter=0.1,
relativeTo=''
)
{
df <- res[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) +
theme_bw() +
geom_point(size = 4, aes(col = significance)) +
# scale_color_manual(values = sigCol) +
theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') +
geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
}
DESeq2PlotVolcano <- function(res, mainLabel, minAdjPvalLabel=Inf, minAdjPvalLabelByTop=Inf, sigCol, adjPvalFilter=Inf, colorFCFilter=2, colorpAdjFilter=0.1, relativeTo='')
{
df <- res
df <- df[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
}
currentPlot <- DESeq2PlotVolcano(res = res, mainLabel = 'SUM159 shNLGN4X-1-2 Dox vs Control', minAdjPvalLabel = Inf, minAdjPvalLabelByTop = 15, sigCol = c('#cccccc', '#d3424e', '#e6939a'), colorFCFilter=absFCMin, colorpAdjFilter=padjFilter)
absFCMin <- 2
padjFilter <- 0.05
currentPlot <- DESeq2PlotVolcano(res = res, mainLabel = 'SUM159 shNLGN4X-1-2 Dox vs Control', minAdjPvalLabel = Inf, minAdjPvalLabelByTop = 15, sigCol = c('#cccccc', '#d3424e', '#e6939a'), colorFCFilter=absFCMin, colorpAdjFilter=padjFilter)
res <- as.data.frame(DESeq2::results(dds))
absFCMin <- 2
padjFilter <- 0.05
currentPlot <- DESeq2PlotVolcano(res = res, mainLabel = 'SUM159 shNLGN4X-1-2 Dox vs Control', minAdjPvalLabel = Inf, minAdjPvalLabelByTop = 15, sigCol = c('#cccccc', '#d3424e', '#e6939a'), colorFCFilter=absFCMin, colorpAdjFilter=padjFilter)
DESeq2PlotVolcano <- function(res, mainLabel, minAdjPvalLabel=Inf, minAdjPvalLabelByTop=Inf, sigCol, adjPvalFilter=Inf, colorFCFilter=2, colorpAdjFilter=0.1, relativeTo='')
{
df <- res
df <- df[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
}
currentPlot <- DESeq2PlotVolcano(res = res, mainLabel = 'SUM159 shNLGN4X-1-2 Dox vs Control', minAdjPvalLabel = Inf, minAdjPvalLabelByTop = 15, sigCol = c('#cccccc', '#d3424e', '#e6939a'), colorFCFilter=absFCMin, colorpAdjFilter=padjFilter)
df <- res
res = res
mainLabel = 'SUM159 shNLGN4X-1-2 Dox vs Control'
minAdjPvalLabel = Inf
minAdjPvalLabelByTop = 15
sigCol = c('#cccccc', '#d3424e', '#e6939a')
colorFCFilter=absFCMin
colorpAdjFilter=padjFilter
df <- res
df <- df[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
minAdjPvalLabel
df$minusLog10Padj
remove_missing(res)
df <- remove.missing(res)
df <- df[,1:6]
df <- ggplot2::remove.missing(res)
df <- ggplot2::remove_missing(res)
df <- df[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
mainPlot
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
mainPlot
res <- as.data.frame(DESeq2::results(dds, contrast = Teatment))
results(object = dds)
res <- as.data.frame(DESeq2::results(dds, contrast = "Treatment"))
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment",colData$Treatment[1],colData$Treatment[2])))
resultsNames(dds)
colData$Treatment[1]
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment",colData$Treatment[1],colData$Treatment[2])))
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment_dox_plus_vs_dox_minus",colData$Treatment[1],colData$Treatment[2])))
colData(dds)
colData
DESeq2::plotMA(dds)
DESeq2::plotPCA(dds)
DESeq2::plotSparsity(dds)
DESeq2::plotCounts(dds)
DESeq2::design(dds)
DESeq2::DESeq(dds)
dds <- DESeq2::DESeq(dds)
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment_dox_plus_vs_dox_minus",colData$Treatment[1],colData$Treatment[2])))
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment",colData$Treatment[1],colData$Treatment[2])))
resultsNames(dds)
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment","Treatment_dox_plus_vs_dox_minus"))
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment","Treatment_dox_plus_vs_dox_minus")))
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment","Treatment_dox_plus_vs_dox_minus")))
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment","Treatment_dox_plus_vs_dox_minus","Intercept")))
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment","dox_minus","dox_plus")))
res
dim(res)
ddsSUM159NLGN4X.DF <- DESeq2WriteDiff(dds, 'Treatment', as.character(metaData$Treatment[2]), as.character(metaData$Treatment[1]), outputFolder = 'differential-gene-lists/', outputFilePrefix = 'diff_SUM159_shNLGN4X_Dox_vs_Control', absLog2FCMin = log2(absFCMin), geneDescCSV = NA, padjFilter = padjFilter)
Q
Q
ddsSUM159NLGN4X.DF <- DESeq2WriteDiff(dds, 'Treatment', as.character(colData$Treatment[2]), as.character(colData$Treatment[1]), outputFolder = 'differential-gene-lists/', outputFilePrefix = 'diff_SUM159_shNLGN4X_Dox_vs_Control', absLog2FCMin = log2(absFCMin), geneDescCSV = NA, padjFilter = padjFilter)
Q
ddsSUM159NLGN4X.DF <- DESeq2WriteDiff(dds, 'Treatment', as.character(colData$Treatment[2]), as.character(colData$Treatment[1]), outputFolder = 'differential-gene-lists/', outputFilePrefix = 'diff_SUM159_shNLGN4X_Dox_vs_Control', absLog2FCMin = log2(absFCMin), geneDescCSV = NA, padjFilter = padjFilter)
Q
ddsSUM159NLGN4X.DF <- DESeq2WriteDiff(dds, 'Treatment', as.character(colData$Treatment[2]), as.character(colData$Treatment[1]), outputFolder = 'differential-gene-lists/', outputFilePrefix = 'diff_SUM159_shNLGN4X_Dox_vs_Control', absLog2FCMin = log2(absFCMin), geneDescCSV = NA, padjFilter = padjFilter)
Q
ddsSUM159NLGN4X.DF <- DESeq2WriteDiff(dds, 'Treatment', as.character(colData$Treatment[2]), as.character(colData$Treatment[1]), outputFolder = 'differential-gene-lists/', outputFilePrefix = 'diff_SUM159_shNLGN4X_Dox_vs_Control', absLog2FCMin = log2(absFCMin), geneDescCSV = NA, padjFilter = padjFilter)
dim(counts(dds))
expressionMatrix <- read.csv("~/Downloads/shNLGN4X-combined-gene-level-counts.csv",header = TRUE,row.names = 1,stringsAsFactors = FALSE)
dim(expressionMatrix)
expressionMatrix <- read.csv("~/Dropbox (Partners HealthCare)/DFCI_Rotation_Students-Bojana-Polyak-Lab/2017_Felipe_Flores_and_Nick_Harper/SUM159_NLGN4_RNAseq_Analysis_Felipe/shNLGN4X-combined-gene-level-counts.csv",header = TRUE,row.names = 1,stringsAsFactors = FALSE)
expressionMatrix <- expressionMatrix[rowSums(expressionMatrix) > 10,]
expressionMatrix <- expressionMatrix[,order(colnames(expressionMatrix))]
# Generate design formula
designFormula <- as.formula(paste("", paste("Treatment", collapse=" + "), sep="~ "))
# Begin DESeq
dds <- DESeq2::DESeqDataSetFromMatrix(countData = expressionMatrix, colData = colData, design = designFormula)
dds <- DESeq2::estimateSizeFactors(dds)
dds <- DESeq2::DESeq(dds)
res <- as.data.frame(DESeq2::results(dds, contrast = c("Treatment","dox_minus","dox_plus")))
df <- res[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) +
theme_bw() +
geom_point(size = 4, aes(col = significance)) +
# scale_color_manual(values = sigCol) +
theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') +
geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
xTitle <- expression('Log'[2]*' of fold change')
if (relativeTo != '') { xTitle <- paste('Log2 of fold change\n', '(in ', relativeTo, ')', sep = '')}
marginalPlot(mainPlot = mainPlot, mainPlotDF = df, mainPlotXCol = 'log2FoldChange', mainPlotYCol = 'minusLog10Padj', mainTitle = mainLabel, mainXTitle = xTitle, mainYTitle = expression('Negative of log'[10]*' of adjusted p-value'))
mainPlot
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
df <- ggplot2::remove_missing(res)
df <- df[,1:6]
df$minusLog10Padj <- -log10(df$padj)
df <- df[df$minusLog10Padj < adjPvalFilter,]
df$gene <- NA
df$significance <- 'Not significant'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj < -log10(colorpAdjFilter)),'significance'] <- 'padj > 0.1 & fc >= 2X'
df[which(abs(df$log2FoldChange) >= log2(colorFCFilter) & df$minusLog10Padj >= -log10(colorpAdjFilter)),'significance'] <- 'padj < 0.1 & fc >= 2X'
for (i in 1:nrow(df))
{
df[i,'gene'] <- rownames(df)[i]
}
df <- df[order(df$padj),]
mainPlot <- ggplot(df, aes(log2FoldChange, minusLog10Padj)) + theme_bw() + geom_point(size = 4, aes(col = significance)) + scale_color_manual(values = sigCol) + theme(plot.margin = margin(0,0,10,10), axis.text=element_text(size=20), axis.title = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = 'black', size = 1.25), legend.position = 'none') + geom_hline(yintercept = -log10(colorpAdjFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = log2(colorFCFilter), color = 'red', linetype = 'dashed') + geom_vline(xintercept = -log2(colorFCFilter), color = 'red', linetype = 'dashed')
mainPlot
if (minAdjPvalLabel <= max(df$minusLog10Padj))
{
mainPlot <- mainPlot + geom_text_repel(data = filter(df, minusLog10Padj >= minAdjPvalLabel), aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}else
{
if (minAdjPvalLabelByTop != Inf)
{
mainPlot <- mainPlot + geom_text_repel(data = df[1:minAdjPvalLabelByTop,], aes(label = gene), size = 6, fontface = 'bold', point.padding = unit(0.75, 'lines'), force = 2)
}
}
mainPlot
mainPlot+scale_y_continuous(trans=log2_trans())
mainPlot+scale_y_continuous(trans=ggplot2::log2_trans())
mainPlot+scale_y_continuous(trans=scales::log2_trans())
